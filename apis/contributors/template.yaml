AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:

  Namespace:
    Type: String

  DomainName:
    Type: String

  HostedZoneId:
    Type: String

  RegionalCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>

  CognitoUserPoolArn:
    Type: String

  AppleClientId:
    Type: String

  CommunityPatchTableName:
    Type: String

# SAM Globals

Globals:
  Function:
    Runtime: python3.7
    Handler: index.lambda_handler
    Tracing: PassThrough
    Environment:
      Variables:
        CLIENT_ID: !Ref AppleClientId
        COMMUNITY_PATCH_TABLE: !Ref CommunityPatchTableName
        DOMAIN_NAME: !Ref DomainName
        NAMESPACE: !Ref Namespace

Resources:

# API Gateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub 'contributors.${DomainName}'
      RegionalCertificateArn: !Ref RegionalCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ApiGateway
      Stage: Prod
    DependsOn:
      - ApiGateway
      - ApiGatewayProdStage
      - ApiCustomDomain

  RegionalRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'contributors.${DomainName}'
      SetIdentifier: !Sub 'contributors-api-${AWS::Region}'
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId
      HostedZoneId: !Ref HostedZoneId
      Region: !Ref AWS::Region
      Type: A

# Lambda

  AppleIdLogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/implicit_login
      Events:
        GetToken:
          Type: Api
          Properties:
            Path: /login
            Method: get
            RestApiId:
                Ref: ApiGateway

  Oauth2AppleIdToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/oauth2_appleid_token
      Events:
        GetToken:
          Type: Api
          Properties:
            Path: /oauth2/appleid/token
            Method: get
            RestApiId:
                Ref: ApiGateway

  ApiContributorsGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/get_contributors
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        ApiContributorRegistration:
          Type: Api
          Properties:
            Path: /v1/contributors
            Method: get
            RestApiId:
              Ref: ApiGateway

  CreateApiToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/create_api_token
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        ApiContributorRegistration:
          Type: Api
          Properties:
            Path: /v1/tokens
            Method: post
            RestApiId:
              Ref: ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - contributors-api/full_access

  InvalidateApiToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/invalidate_api_token
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        ApiContributorRegistration:
          Type: Api
          Properties:
            Path: /v1/tokens/{token_id}/invalidate
            Method: post
            RestApiId:
              Ref: ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
                - contributors-api/full_access
