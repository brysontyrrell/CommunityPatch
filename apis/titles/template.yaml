AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Jamf Pro endpoints for Community Patch

Parameters:

  DomainName:
    Type: String

  HostedZoneId:
    Type: String

  RegionalCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>

  CommunityPatchTableName:
    Type: String

# SAM Globals

Globals:
  Function:
    Runtime: python3.7
    Handler: index.lambda_handler
    Tracing: PassThrough
    Environment:
      Variables:
        COMMUNITY_PATCH_TABLE: !Ref CommunityPatchTableName
        DOMAIN_NAME: !Ref DomainName

Resources:

# API Gateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: ApiAuthorizer
        Authorizers:
          ApiAuthorizer:
            FunctionArn: !GetAtt Authorizer.Arn

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub 'api.${DomainName}'
      RegionalCertificateArn: !Ref RegionalCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ApiGateway
      Stage: Prod
    DependsOn:
      - ApiGateway
      - ApiGatewayProdStage
      - ApiCustomDomain

  RegionalRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'api.${DomainName}'
      SetIdentifier: !Sub 'patch-api-${AWS::Region}'
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId
      HostedZoneId: !Ref HostedZoneId
      Region: !Ref AWS::Region
      Type: A

# Lambda

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/authorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CommunityPatchTableName

  ReadTitles:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/read_titles
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        ReadTitles:
          Type: Api
          Properties:
            Path: /v1/titles
            Method: get
            RestApiId:
              Ref: ApiGateway
        ReadTitle:
          Type: Api
          Properties:
            Path: /v1/titles/{title_id}
            Method: get
            RestApiId:
              Ref: ApiGateway


  CreateTitle:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/create_title
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        CreateTitle:
          Type: Api
          Properties:
            Path: /v1/titles
            Method: post
            RestApiId:
                Ref: ApiGateway

  UpdateTitleVersion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/update_title_version
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        AddVersion:
          Type: Api
          Properties:
            Path: /api/v1/titles/{title_id}/versions
            Method: post
            RestApiId:
              Ref: ApiGateway
        DeleteVersion:
          Type: Api
          Properties:
            Path: /api/v1/titles/{title_id}/versions/{version}
            Method: delete
            RestApiId:
              Ref: ApiGateway

  DeleteTitle:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/delete_title
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CommunityPatchTableName
      Events:
        DeleteTitle:
          Type: Api
          Properties:
            Path: /api/v1/titles/{title_id}
            Method: delete
            RestApiId:
              Ref: ApiGateway

