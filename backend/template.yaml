AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:

  Namespace:
    Type: String

  DomainName:
    Type: String

  ContributorsTableName:
    Type: AWS::SSM::Parameter::Value<String>

  ContributorsTableStreamArn:
    Type: AWS::SSM::Parameter::Value<String>

# SAM Globals

Globals:
  Function:
    Runtime: python3.7
    Handler: index.lambda_handler
    Tracing: Active
    Environment:
      Variables:
        NAMESPACE: !Ref Namespace

Resources:

# SNS Topics

  ContributorStreamTopic:
    Type: AWS::SNS::Topic

  EmailServiceTopic:
    Type: AWS::SNS::Topic

# Lambda

  ContributorStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/contributor_stream
      Environment:
        Variables:
          CONTRIBUTOR_STREAM_TOPIC: !Ref ContributorStreamTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ContributorStreamTopic.TopicName
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !Ref ContributorsTableStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10

  ContributorStreamProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/contributor_stream_processor
      Timeout: 10
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          REGISTRATION_SERVICE: !Ref RegistrationService
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt EmailServiceTopic.TopicName
        - Statement:
            - Effect: Allow
              Action: ssm:GetParameter*
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/communitypatch/${Namespace}/*
            - Effect: Allow
              Action: states:StartExecution
              Resource:
                - !Ref RegistrationService
      Events:
        Contributors:
          Type: SNS
          Properties:
            Topic: !Ref ContributorStreamTopic

  EmailService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/email_service
      Timeout: 10
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/communitypatch/${Namespace}/*
          - Effect: Allow
            Action: ses:SendEmail
            Resource: '*'
            Condition:
              StringEquals:
                ses:FromAddress: !Sub 'noreply@${DomainName}'
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref EmailServiceTopic

# Step Functions

# Timeout will be 86400
  RegistrationService:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt RegistrationServiceRole.Arn
      DefinitionString: !Sub >
        {
          "StartAt": "Send Verification Email",
          "States": {
            "Send Verification Email": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "TimeoutSeconds": 600,
              "Parameters": {
                "FunctionName": "${EmailService.Arn}",
                "Payload": {
                  "recipient.$": "$.email",
                  "message_type": "verification",
                  "message_data": {
                    "display_name.$": "$.display_name"
                  },
                  "task_token.$": "$$.Task.Token"
                }
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.TIMEOUT"],
                  "Next": "Cleanup"
                }
              ],
              "Next": "Generate Access Token"
            },
            "Generate Access Token": {
              "Type": "Pass",
              "Next": "Email Access Token"
            },
            "Email Access Token": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${EmailService.Arn}",
                "Payload": {
                  "recipient.$": "$.email",
                  "message_type": "api_token",
                  "message_data": {
                    "display_name.$": "$.display_name"
                  }
                }
              },
              "End": true
            },
            "Cleanup": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:deleteItem",
              "Parameters": {
                "TableName": "${ContributorsTableName}",
                "Key": {
                  "id": {"S.$": "$.id"}
                }
              },
              "End": true
            }
          }
        }

  RegistrationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt EmailService.Arn
              - Effect: Allow
                Action: dynamodb:DeleteItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ContributorsTableName}

# SSM Parameter Store

  PublishEmailServiceTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /communitypatch/${Namespace}/email_service_topic_arn
      Type: String
      Value: !Ref EmailServiceTopic
